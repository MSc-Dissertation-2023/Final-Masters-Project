name: GameCI Template 🎮

on: push

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:

  # testRunner:
  #   name: Test all modes 📝
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Create LFS file list
  #       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

  #     - name: Restore LFS cache
  #       uses: actions/cache@v2
  #       id: lfs-cache
  #       with:
  #         path: .git/lfs
  #         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

  #     - name: Git LFS Pull
  #       run: |
  #         git lfs pull
  #         git add .
  #         git reset --hard

  #     - name: Restore Library cache
  #       uses: actions/cache@v2
  #       with:
  #         path: Library
  #         key: Library-test-project
  #         restore-keys: |
  #           Library-test-project-
  #           Library-

  #      - uses: webbertakken/unity-test-runner@v2
  #        id: testRunner
  #        with:
  #          testMode: EditMode

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: Test results (all modes)
  #         path: ${{ steps.testRunner.outputs.artifactsPath }}

  
  buildWindows:
    #needs: testRunner
    name: Build for Windows 🖥️
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneWindows64
          restore-keys: |
            Library-build-
            Library-

      - uses: webbertakken/unity-builder@v2
        with:
          targetPlatform: StandaloneWindows64

      - uses: actions/upload-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: ${{ github.workspace }}/build/StandaloneWindows64
  

  deploy_release:
    needs: buildWindows
    name: Deploy Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: ${{ github.workspace }}/build/StandaloneWindows64

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0  # Set the desired tag name
          release_name: "Release v1.0.0"  # Set the desired release name
          draft: false
          prerelease: false
      
      - name: Compress Directory
        run: zip -r StandaloneWindows64.zip build/StandaloneWindows64

      - name: Upload build artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: StandaloneWindows64.zip
          asset_name: "Masters-of-Dungeons-StandaloneWindows64.zip"  # Set the desired asset name
          asset_content_type: application/zip