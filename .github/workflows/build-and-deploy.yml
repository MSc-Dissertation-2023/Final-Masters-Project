name: Actions ðŸ˜Ž

on:
  push:
    branches:
      - main
      - sheng-devops

jobs:
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Test
      # - name: Run tests
      #   uses: game-ci/unity-test-runner@v2.2.0
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #   with:
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}
      #     testMode: EditMode

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-2

      - name: Sync output to S3
        run: |
          aws s3 sync ./build/WebGL/WebGL s3://mdk-2023 --delete
          aws s3 cp ./build/WebGL/WebGL/Build/WebGL.data.gz s3://mdk-2023/Build/WebGL.data.gz --content-type 'application/octet-stream' --content-encoding 'gzip'
          aws s3 cp ./build/WebGL/WebGL/Build/WebGL.framework.js.gz s3://mdk-2023/Build/WebGL.framework.js.gz --content-type 'application/wasm' --content-encoding 'gzip'
          aws s3 cp ./build/WebGL/WebGL/Build/WebGL.loader.js s3://mdk-2023/Build/WebGL.loader.js --content-type 'application/javascript'
          aws s3 cp ./build/WebGL/WebGL/Build/WebGL.wasm.gz s3://mdk-2023/Build/WebGL.wasm.gz --content-type 'application/wasm' --content-encoding 'gzip'